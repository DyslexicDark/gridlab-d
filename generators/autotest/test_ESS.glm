clock {
	timezone "PST+8PDT";
	starttime '2001-08-01 12:00:00 PST';
	stoptime '2001-08-01 12:00:6 PST';
}

#set suppress_repeat_messages=1
#set relax_naming_rules=1;
#set profiler=1
#define rotor_convergence=0.00000000000001
#set double_format=%+.12lg
#set complex_format=%+.12lg%+.12lg%c

//Deltamode declarations - global values
#set deltamode_timestep=100000000		//100 ms
#set deltamode_maximumtime=60000000000	//1 minute
#set deltamode_iteration_limit=10		//Iteration limit
#set deltamode_forced_always=true

module assert;
module tape;


module reliability {
	enable_subsecond_models true;
	maximum_event_length 1800000;	//Maximum length of events in seconds (manual events are excluded from this limit)
	report_event_log true;
}

module powerflow {
	enable_subsecond_models true;
	deltamode_timestep 1 ms;	//10 ms
	solver_method NR;
	all_powerflow_delta true;
	//enable_inrush TRUE;
};

module generators {
	enable_subsecond_models true;
	deltamode_timestep 1 ms;
}

// module climate;

// object climate {
	// name "WA-Yakima";
	// tmyfile "WA-Yakima.tmy2";
	// interpolate NONE;
// }; 

#include "../data_ESS_Inverter.glm"


//Fault check option
object fault_check {
	name base_fault_check_object;
	check_mode ONCHANGE;
	strictly_radial false;
	eventgen_object testgendev;
	grid_association true;	//Flag to ensure non-monolithic islands
	//output_filename test_connect.txt;
	//full_output_file true;
}

// Junk event
object eventgen {
	flags DELTAMODE;
	name testgendev;
	//parent testmetrics;
	fault_type "SW-A";     //Type of fault for the object to induce
	manual_outages "microgrid_switch1,2001-08-01 12:00:15.00 PST,2001-08-01 12:00:31 PST";
}   // First time is when the switch will open, the second time is when it will close

// Junk event
object eventgen {
	flags DELTAMODE;
	name testgendev1;
	//parent testmetrics;
	fault_type "SW-ABC";     //Type of fault for the object to induce
	manual_outages "grid_switch,2001-08-01 12:00:4.00 PST,2001-08-01 12:00:31 PST";
}   // First time is when the switch will open, the second time is when it will close


///////////////////////////////////////////////////////////////////////////
// Start of individual objects/////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////



object line_configuration {	
	name LINE1;
	z11 0.01058+0.01058j;
	z12 0;
	z13 0;
	z21 0;
	z22 0.01058+0.01058j;
	z23 0;
	z31 0;
	z32 0;
	z33 0.01058+0.01058j;
}

object line_configuration {	
	name LINE2;
	z11 0.00345+0.00345j;
	z12 0;
	z13 0;
	z21 0;
	z22 0.00345+0.00345j;
	z23 0;
	z31 0;
	z32 0;
	z33 0.00345+0.00345j;
}

object line_configuration {	// grid line
	name LINE3;
	z11 0.01932+0.115j;
	z12 0;
	z13 0;
	z21 0;
	z22 0.01932+0.115j;
	z23 0;
	z31 0;
	z32 0;
	z33 0.01932+0.115j;
}



//Define line objects grid to node 1
object overhead_line  {
     phases "ABCN";
     name Line0;
     from Node0;
     to Node00;
     length 1 mile;
     configuration LINE3;
 
    // object recorder {
	// property current_in_A.real,current_in_A.imag,current_in_B.real,current_in_B.imag,current_in_C.real,current_in_C.imag;
	// interval -1;
	// flags DELTAMODE;
	// file Line0_current.csv;
     // };	  
	 
	 }


//Define line objects Inverter 1 to load
object overhead_line  {
     phases "ABCN";
     name Line1;
     from Node1;
     to Node2;
     length 1 mile;
     configuration LINE1;
 
    // object recorder {
	// property current_in_A.real,current_in_A.imag,current_in_B.real,current_in_B.imag,current_in_C.real,current_in_C.imag;
	// interval -1;
	// flags DELTAMODE;
	// file Line1_current.csv;
     // };	  
	 
	 }

//Define line objects Inverter 2 to load
object overhead_line  {
     phases "ABCN";
     name Line2;
     from Node4;
     to Node2;
     length 1 mile;
     configuration LINE2;

    // object recorder {
	// property current_in_A.real,current_in_A.imag,current_in_B.real,current_in_B.imag,current_in_C.real,current_in_C.imag;
	// interval -1;
	// flags DELTAMODE;
	// file Line2_current.csv;
     // };
	 
	 } 


object meter {
     name Node0;  // grid
     phases "ABCN";
	 bustype SWING;
     flags DELTAMODE;
     nominal_voltage 277.1363;	 
	 
	 voltage_A 277.1363;
     voltage_B -138.5682-240.0000j;
     voltage_C -138.5682+240.0000j;	 

    // object recorder {
	// property measured_real_power,measured_reactive_power,measured_current_A.real,measured_current_A.imag,measured_current_B.real,measured_current_B.imag,measured_current_C.real,measured_current_C.imag,voltage_A.real,voltage_A.imag,voltage_B.real,voltage_B.imag,voltage_C.real,voltage_C.imag;
	// interval -1;
	// flags DELTAMODE;
	// file Grid.csv;
     // };		 
  
}


object meter {
     name Node00;  // grid
     phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 277.1363;	 
	 
	 voltage_A 277.1363;
     voltage_B -138.5682-240.0000j;
     voltage_C -138.5682+240.0000j;	 	 
  
}


object meter {
     name Node1;  // inverter 1
     phases "ABCN";
	 bustype SWING_PQ;
     flags DELTAMODE;
     nominal_voltage 277.1363;	 
	 
	 voltage_A 277.1363;
     voltage_B -138.5682-240.0000j;
     voltage_C -138.5682+240.0000j;	 

    // object recorder {
	// property measured_real_power,measured_reactive_power,measured_current_A.real,measured_current_A.imag,measured_current_B.real,measured_current_B.imag,measured_current_C.real,measured_current_C.imag,voltage_A.real,voltage_A.imag,voltage_B.real,voltage_B.imag,voltage_C.real,voltage_C.imag;
	// interval -1;
	// flags DELTAMODE;
	// file Inverter_#1_MG1.csv;
     // };		 

  
}

object meter {
     name Node4;  // inverter 2
     phases "ABCN";
	 //bustype SWING;
     flags DELTAMODE;
     nominal_voltage 277.1363;	 
	 
	 voltage_A 277.1363;
     voltage_B -138.5682-240.0000j;
     voltage_C -138.5682+240.0000j;	 
	 
    // object recorder {
	// property measured_real_power,measured_reactive_power,measured_current_A.real,measured_current_A.imag,measured_current_B.real,measured_current_B.imag,measured_current_C.real,measured_current_C.imag,voltage_A.real,voltage_A.imag,voltage_B.real,voltage_B.imag,voltage_C.real,voltage_C.imag;
	// interval -1;
	// flags DELTAMODE;
	// file Inverter_#2_MG1.csv;
     // };	  
	 
}


object meter {
     name Node2;
     phases "ABCN";
     flags DELTAMODE;	 
     nominal_voltage 277.1363;
	 
    // object recorder {
	// property measured_real_power,measured_reactive_power,measured_current_A.real,measured_current_A.imag,measured_current_B.real,measured_current_B.imag,measured_current_C.real,measured_current_C.imag,voltage_A.real,voltage_A.imag,voltage_B.real,voltage_B.imag,voltage_C.real,voltage_C.imag;
	// interval -1;
	// flags DELTAMODE;
	// file Load.csv;
     // };	 
	 
}
 
 
object load {
     name Node3;
     phases "ABCN";
     flags DELTAMODE;
     constant_impedance_A 4.608;
     constant_impedance_B 4.608;	
     constant_impedance_C 4.608;		 
     nominal_voltage 277.1363;

	 }
 

// Switches


object switch {
     phases "ABCN";
     name microgrid_switch1;
     from Node2;
     to Node3;
     status CLOSED;
	 
	 // object recorder {
		// file microgrid_switch1.csv;
		// property phase_A_state,phase_B_state,phase_C_state;
		// flags DELTAMODE;
		// interval -1;
	// };
}

object switch {
     phases "ABCN";
     name grid_switch;
     from Node00;
     to Node1;
     status CLOSED;
	 // object recorder {
		// file grid_switch.csv;
		// property phase_A_state,phase_B_state,phase_C_state;
		// flags DELTAMODE;
		// interval -1;
	// };
}


// This player kicks the system into delta mode early so that all transition transients can settle before the scenario transients are triggered
// object player {
	// file trigger.player;
	// property nominal_voltage;
	// parent Node1;
	// flags DELTAMODE;
// }

